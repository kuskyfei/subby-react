/* eslint-disable */

// react
import React from 'react'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'
import { withRouter, Link } from 'react-router-dom'
import PropTypes from 'prop-types'

// material
import withStyles from '@material-ui/core/styles/withStyles'

// components
import {Post} from '../../components'

// actions
import actions from './reducers/actions'

// api
const services = require('../../services')

// infinite scroll
import {WindowScroller, InfiniteLoader, AutoSizer, List, CellMeasurer, CellMeasurerCache} from 'react-virtualized';
import 'react-virtualized/styles.css'; // only needs to be imported once
import ReactResizeDetector from 'react-resize-detector';

const day = 1000*60*60*24

const styles = theme => ({
  layout: {
    width: 'auto',
    marginLeft: theme.spacing.unit * 2,
    marginRight: theme.spacing.unit * 2,
    [theme.breakpoints.up(600 + theme.spacing.unit * 2 * 2)]: {
      width: 600,
      marginLeft: 'auto',
      marginRight: 'auto',
    }
  }
})

const STATUS_LOADING = 1
const STATUS_LOADED = 2

const data = {
  comment: 'hey this is my comment',
  link: "https://www.reddit.com/r/mildlyinteresting/comments/9b3f7r/in_canada_because_certain_dyes_are_banned_orange/",
  username: "MyUsername",
  timestamp: "December 3rd 2018"
}

const getRowHeight = ({index}) => {
  const size = sizes[index] || 400
  return size
}

const sizes = []
let listRef
function setRef (ref) {
  listRef = ref
}

const x = [];
for (var i = 1; i <= 1000; i++) {

  console.log(i)
  const index = i
  const handleResize = (width, height) => {
    console.log({width, height}, index)
    sizes[index] = height
    listRef.recomputeRowHeights()
    listRef.forceUpdate()
  }

  x.push(
    <div>
      <ReactResizeDetector 
        handleHeight 
        onResize={handleResize}>
        <Post post={data} />
      </ReactResizeDetector>
    </div>
  )
}

// mock up list with items from 1... 1000
const list = x;

class InfiniteLoaderExample extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      loadedRowCount: 0,
      loadedRowsMap: {},
      loadingRowCount: 0,
      randomScrollToIndex: null,
      list
    };

    this._timeoutIdMap = {}

    this._clearData = this._clearData.bind(this)
    this._isRowLoaded = this._isRowLoaded.bind(this)
    this._loadMoreRows = this._loadMoreRows.bind(this)
    this._rowRenderer = this._rowRenderer.bind(this)
  }

  componentWillUnmount() {
    Object.keys(this._timeoutIdMap).forEach(timeoutId => {
      clearTimeout(timeoutId)
    })
  }

  _clearData() {
    this.setState({
      loadedRowCount: 0,
      loadedRowsMap: {},
      loadingRowCount: 0
    })
  }

  _isRowLoaded({ index }) {
    console.log('_isRowLoaded', index);
    const {loadedRowsMap} = this.state
    return !!loadedRowsMap[index] // STATUS_LOADING or STATUS_LOADED
  }

  _loadMoreRows({ startIndex, stopIndex }) {
    console.log('load more rows', startIndex, stopIndex);
    const {loadedRowsMap, loadingRowCount } = this.state
    const increment = stopIndex - startIndex + 1

    for (var i = startIndex; i <= stopIndex; i++) {
      loadedRowsMap[i] = STATUS_LOADING
    }

    this.setState({
      loadingRowCount: loadingRowCount + increment
    })

    const timeoutId = setTimeout(() => {
      const {loadedRowCount, loadingRowCount } = this.state

      delete this._timeoutIdMap[timeoutId]

      for (var i = startIndex; i <= stopIndex; i++) {
        loadedRowsMap[i] = STATUS_LOADED
      }

      this.setState({
        loadingRowCount: loadingRowCount - increment,
        loadedRowCount: loadedRowCount + increment
      })

      promiseResolver()
    }, 1000 + Math.round(Math.random() * 2000))

    this._timeoutIdMap[timeoutId] = true

    let promiseResolver

    return new Promise(resolve => {
      promiseResolver = resolve
    })
  }

  _rowRenderer({ index, key, style }) {
    const {loadedRowsMap} = this.state

    const row = list[index]
    let content

    if (loadedRowsMap[index] === STATUS_LOADED) {
      content = row
    } else {
      content = (
        <div
          style={{ width: row.size }}>
          Loading post...
        </div>
      )
    }

    return (
      <div
        className="row"
        key={key}
        style={style}
        >
        {content}
      </div>
    )
  }

  render() {
    const { loadedRowCount, loadingRowCount, randomScrollToIndex, list } = this.state

    return (
      <div className="WindowScrollerWrapper">
        <InfiniteLoader
          isRowLoaded={this._isRowLoaded}
          loadMoreRows={this._loadMoreRows}
          rowCount={list.length}
          threshold={10}>
          {({ onRowsRendered, registerChild }) => (
            <WindowScroller>
              {({ height, isScrolling, scrollTop }) => (
                <AutoSizer disableHeight>
                  {({ width }) => (
                    <List
                      ref={(node) => {setRef(node); registerChild(node)}}
                      className="List"
                      autoHeight
                      height={height}
                      width={width}
                      onRowsRendered={onRowsRendered}
                      rowCount={list.length}
                      rowHeight={getRowHeight}
                      rowRenderer={this._rowRenderer}
                      overscanRowCount={100}
                      scrollTop={scrollTop} />
                  )}
                </AutoSizer>
              )}
            </WindowScroller>
          )}
        </InfiniteLoader>
      </div>)
  }
}

class Feed extends React.Component {

  componentDidMount() {

    ;(async () => {

      const postQuery = {
        subscriptions: this.props.subscriptions,
        startAt: 0,
        count: 20,
        beforeTimestamp: Date.now(),
        afterTimestamp: Date.now() - 7*day
      }

      const feed = await services.getFeed(postQuery)
      const {setFeed} = this.props.actions
      setFeed(feed)

      console.log('feed', feed)
    })()
    
  }

  componentDidUpdate(prevProps) {

    console.log('feed updated')
  }

  render() {
    const { classes, feed } = this.props

    const posts = []
    for (const post of feed) {
      console.log(post)

      posts.push(<Post key={JSON.stringify(post)} post={post}/>)
    }

    return (
      <div className={classes.layout}>
        
        {/*posts*/}

        <InfiniteLoaderExample />

      </div>
    )
  }
}

Feed.propTypes = {
  classes: PropTypes.object.isRequired,
}

const mapStateToProps = state => ({
  subscriptions: state.app.subscriptions,
  feed: state.feed
})
const mapDispatchToProps = dispatch => ({
  actions: bindActionCreators(actions, dispatch)
})

export default withRouter(connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Feed))) // eslint-disable-line
